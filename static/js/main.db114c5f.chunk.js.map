{"version":3,"sources":["action.js","HanRiverGraph.js","HanRiver.js","App.js","reportWebVitals.js","reducer.js","index.js"],"names":["getHanRiver","dispatch","type","axios","get","then","response","payload","data","catch","error","console","log","options","legend","display","labels","fontColor","scales","yAxes","ticks","min","stepSize","maintainAspectRatio","HanRiverGraph","riverInfo","useSelector","state","useDispatch","useEffect","rankColor","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","temp","className","HanRver","requestStatus","status","style","fontSize","time","App","HanRiver","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","action","store","createStore","applyMiddleware","ReduxThunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAEaA,EAAc,WACvB,OAAM,SAACC,GACHA,EAAS,CAACC,KAAM,oBAEhBC,IAAMC,IAAI,mCAAmCC,MAAK,SAAAC,GAC9CL,EAAS,CACLC,KAAM,kBACNK,QAASD,EAASE,UAEvBC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZT,EAAS,CAACC,KAAM,0B,QCRtBW,EAAU,CACZC,OAAO,CACHC,SAAS,EACTC,OAAQ,CACJC,UAAW,UAGnBC,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,IAAK,EACLC,SAAU,MAItBC,qBAAqB,GAsCVC,EAnCO,WAClB,IAAIC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMnB,QACvCP,EAAW2B,cAEfC,qBAAU,WACN5B,EAASD,OACV,CAACC,IAEJ,IACI6B,EAAY,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAE/ItB,EAAO,CACTQ,OAAQ,CAAC,UAAK,UAAK,UAAK,UAAM,UAAM,UAAM,UAAM,UAAM,UAAM,WAAO,WAAO,WAAO,gBACjFe,SAAU,CACN,CACIC,MAAO,2DACPC,gBAAiBH,EACjBI,YAAaJ,EACbK,YAAa,EACbC,qBAAsBN,EACtBO,iBAAkBP,EAClBtB,KAbQ,CAAE,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAKiB,EAAUa,SAmBpG,OACI,cAAC,MAAD,CAAKC,UAAU,SACX/B,KAAMA,EACNK,QAASA,KCfN2B,G,OAhCC,WACZ,IAAIf,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMnB,QACvCiC,EAAgBf,aAAY,SAAAC,GAAK,OAAIA,EAAMe,UAE3CzC,EAAW2B,cAMf,OAJAC,qBAAU,WACN5B,EAASD,OACV,CAACC,IAEiB,mBAAlBwC,EAEK,wDAOJ,sBAAKF,UAAU,WAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,cAAC,EAAD,MAEJ,sBAAKA,UAAU,gBAAf,UACI,qBAAKI,MAAO,CAACC,SAAU,IAAvB,oDACA,sBAAKD,MAAO,CAACC,SAAU,IAAvB,UAA6BnB,EAAUa,KAAvC,YACA,qBAAKK,MAAO,CAACC,SAAU,IAAvB,SAA6BnB,EAAUoB,eCxBxCC,MANf,WACE,OACE,cAACC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7C,MAAK,YAAkD,IAA/C8C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCPRO,EAAe,CACjBd,OAAQ,UACRlC,KAAM,CACF8B,KAAM,GACNO,KAAM,KA2BCY,EAvBC,WAAmC,IAAlC9B,EAAiC,uDAAzB6B,EAAcE,EAAW,uCAC9C,OAAOA,EAAOxD,MACV,IAAK,iBACD,kCACOyB,GADP,IAEIe,OAAQ,YAEhB,IAAK,kBACD,MAAM,CACFA,OAAQ,UACRlC,KAAMkD,EAAOnD,SAErB,IAAK,kBACD,kCACOoB,GADP,IAEIe,OAAQ,UAEhB,QACI,OAAOf,I,eChBfgC,EAAQC,YAAYH,EAASI,YAAgBC,MAEjDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BnB,K","file":"static/js/main.db114c5f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getHanRiver = () => {\r\n    return(dispatch) => {\r\n        dispatch({type: 'REQUSET_PENDING'})\r\n\r\n        axios.get('https://hanriver.herokuapp.com/').then(response => {\r\n            dispatch({\r\n                type: 'REQUEST_SUCCESS',\r\n                payload: response.data\r\n            });\r\n        }).catch(error => {\r\n            console.log(error);\r\n            dispatch({type: 'REQUSET_FAILURER'});\r\n        })\r\n\r\n    }\r\n\r\n};","import { getHanRiver } from './action';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\n\r\nconst options = {\r\n    legend:{\r\n        display: true,\r\n        labels: {\r\n            fontColor: 'black'\r\n        }\r\n    },\r\n    scales: {\r\n        yAxes: [{\r\n            ticks: {\r\n                min: 0,\r\n                stepSize: 1,\r\n            }\r\n        }]  \r\n    },\r\n    maintainAspectRatio: false\r\n}\r\n\r\nconst HanRiverGraph = () => {\r\n    let riverInfo = useSelector(state => state.data);\r\n    let dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getHanRiver());\r\n    }, [dispatch]);\r\n\r\n    let calculatedArr = [ 3.9, 4.7, 7.9, 12.5, 17.1, 21.9, 23.6, 21.1, 18.8, 16.4, 11.6, 5.8, riverInfo.temp]\r\n    let rankColor = [\"#ABBBBB\", \"#AABBBB\", \"#AAABBB\", \"#AAAABB\", \"#AAAAAB\", \"#BBBBBB\", \"#CBBBBB\", \"#CCBBBB\", \"#CCCBBB\", \"#CCCCBB\", \"#CCCCCB\", \"#CCCCCC\", \"#CDDDDD\"]\r\n\r\n    const data = {\r\n        labels: ['1월','2월','3월','4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월', '오늘'],\r\n        datasets: [\r\n            {\r\n                label: \"2020년 월 평균 한강 수온\",\r\n                backgroundColor: rankColor,\r\n                borderColor: rankColor,\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: rankColor,\r\n                hoverBorderColor: rankColor,\r\n                data: calculatedArr\r\n            }\r\n        ]\r\n    };\r\n\r\n\r\n    return(\r\n        <Bar className=\"_chart\"\r\n            data={data}\r\n            options={options}\r\n        />\r\n    )\r\n};\r\n\r\nexport default HanRiverGraph;","import { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { getHanRiver } from './action';\r\nimport HanRiverGraph from './HanRiverGraph';\r\nimport './stlye.css';\r\n\r\nconst HanRver = () => {\r\n    let riverInfo = useSelector(state => state.data);\r\n    let requestStatus = useSelector(state => state.status);\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getHanRiver());\r\n    }, [dispatch]);\r\n\r\n    if(requestStatus === 'REQUST_PENDING'){\r\n        return(\r\n            <h1>\r\n                로딩중....\r\n            </h1>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className=\"hanriver\">\r\n            <div className=\"hanrivergraph\" >\r\n                <HanRiverGraph/>\r\n            </div>\r\n            <div className=\"hanriver-info\">\r\n                <div style={{fontSize: 35}}>현재 한강 수온</div>\r\n                <div style={{fontSize: 30}}>{riverInfo.temp}℃</div>\r\n                <div style={{fontSize: 15}}>{riverInfo.time}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HanRver;","import HanRiver from './HanRiver'\n\nfunction App() {\n  return (\n    <HanRiver />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    status: 'SUCCESS',\r\n    data: {\r\n        temp: '',\r\n        time: ''\r\n    }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case 'REQUST_PENDING':\r\n            return{\r\n                ...state,\r\n                status: 'PENDING'\r\n            }\r\n        case 'REQUEST_SUCCESS':\r\n            return{\r\n                status: 'SUCCESS',\r\n                data: action.payload\r\n            }\r\n        case 'REQUSET_FAILURE':\r\n            return{\r\n                ...state,\r\n                status: 'REEOR'\r\n            }\r\n        default:\r\n            return state;\r\n        \r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reducer  from './reducer';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport ReduxThunk from 'redux-thunk';\n\nlet store = createStore(reducer, applyMiddleware(ReduxThunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}